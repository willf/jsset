// Generated by CoffeeScript 1.2.1-pre
(function() {
  var Set;

  this.Set = Set = (function() {

    Set.name = 'Set';

    function Set(items) {
      var item, _i, _len;
      if (items == null) items = [];
      this.store = {};
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        this.store[item] = item;
      }
    }

    Set.prototype.add = function(object) {
      return this.store[object] = object;
    };

    Set.prototype.contains = function(object) {
      return this.store[object] || false;
    };

    Set.prototype["delete"] = function(object) {
      return delete this.store[object];
    };

    Set.prototype.items = function() {
      var key, _i, _len, _ref, _results;
      _ref = Object.keys(this.store);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        _results.push(this.store[key]);
      }
      return _results;
    };

    Set.prototype.size = function() {
      return this.items().length;
    };

    Set.prototype.equals = function(other) {
      var eq, item, loc, s, _fn, _fn1, _i, _j, _len, _len1, _ref, _ref1;
      s = this.store;
      eq = true;
      _ref = this.items();
      _fn = function(item) {
        if (!other.store[item]) return eq = false;
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _fn(item);
      }
      if (!eq) return eq;
      loc = this;
      _ref1 = other.items();
      _fn1 = function(item) {
        if (!loc.store[item]) return eq = false;
      };
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        _fn1(item);
      }
      return eq;
    };

    Set.prototype.union = function(other) {
      return new Set(other.items().concat(this.items()));
    };

    Set.prototype.intersection = function(other) {
      var item, ks, _fn, _i, _len, _ref;
      ks = [];
      _ref = this.items();
      _fn = function(item) {
        if (other.contains(item)) return ks[ks.length] = item;
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _fn(item);
      }
      return new Set(ks);
    };

    Set.prototype.difference = function(other) {
      var item, ks, _fn, _i, _len, _ref;
      ks = [];
      _ref = this.items();
      _fn = function(item) {
        if (!other.contains(item)) return ks[ks.length] = item;
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _fn(item);
      }
      return new Set(ks);
    };

    Set.prototype.union_arity = function(other) {
      return (this.union(other)).size();
    };

    Set.prototype.intersection_arity = function(other) {
      var item, n, _fn, _i, _len, _ref;
      n = 0;
      _ref = this.items();
      _fn = function(item) {
        if (other.contains(item)) return n++;
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _fn(item);
      }
      return n;
    };

    Set.prototype.difference_arity = function(other) {
      var item, n, _fn, _i, _len, _ref;
      n = 0;
      _ref = this.items();
      _fn = function(item) {
        if (!other.contains(item)) return n++;
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _fn(item);
      }
      return n;
    };

    Set.prototype.jaccardIndex = function(other) {
      return this.intersection_arity(other) / this.union_arity(other);
    };

    Set.prototype.jaccardDistance = function(other) {
      return 1 - this.jaccardIndex(other);
    };

    Set.prototype.hammingDistance = function(other) {
      return this.union_arity(other) - this.intersection_arity(other);
    };

    Set.prototype.normalizedHammingDistance = function(other, size) {
      if (size == null) size = null;
      if (size === null) {
        return this.jaccardDistance(other);
      } else {
        return (this.union_arity(other) - this.intersection_arity(other)) / size;
      }
    };

    return Set;

  })();

}).call(this);
