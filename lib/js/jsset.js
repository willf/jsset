// Generated by CoffeeScript 1.2.1-pre
(function() {

  this.intersection = function(a, b) {
    var h, item, r, _i, _j, _len, _len1;
    r = [];
    h = new Object;
    for (_i = 0, _len = a.length; _i < _len; _i++) {
      item = a[_i];
      h[item] = true;
    }
    for (_j = 0, _len1 = b.length; _j < _len1; _j++) {
      item = b[_j];
      if (h[item]) r.push(item);
    }
    return r;
  };

  this.union = function(a, b) {
    var h, item, r, _i, _j, _k, _len, _len1, _len2;
    r = [];
    h = new Object;
    for (_i = 0, _len = a.length; _i < _len; _i++) {
      item = a[_i];
      h[item] = true;
    }
    for (_j = 0, _len1 = a.length; _j < _len1; _j++) {
      item = a[_j];
      r.push(item);
    }
    for (_k = 0, _len2 = b.length; _k < _len2; _k++) {
      item = b[_k];
      if (!h[item]) r.push(item);
    }
    return r;
  };

  this.difference = function(a, b) {
    var h, item, r, _i, _j, _len, _len1;
    r = [];
    h = new Object;
    for (_i = 0, _len = b.length; _i < _len; _i++) {
      item = b[_i];
      h[item] = true;
    }
    for (_j = 0, _len1 = a.length; _j < _len1; _j++) {
      item = a[_j];
      if (!h[item]) r.push(item);
    }
    return r;
  };

  this.intersection_arity = function(a, b) {
    var count, h, item, _i, _j, _len, _len1;
    count = 0;
    h = new Object;
    for (_i = 0, _len = a.length; _i < _len; _i++) {
      item = a[_i];
      h[item] = true;
    }
    for (_j = 0, _len1 = b.length; _j < _len1; _j++) {
      item = b[_j];
      if (h[item]) count++;
    }
    return count;
  };

  this.union_arity = function(a, b) {
    var count, h, item, _i, _j, _len, _len1;
    count = a.length;
    h = new Object;
    for (_i = 0, _len = a.length; _i < _len; _i++) {
      item = a[_i];
      h[item] = true;
    }
    for (_j = 0, _len1 = b.length; _j < _len1; _j++) {
      item = b[_j];
      if (!h[item]) count++;
    }
    return count;
  };

  this.difference_arity = function(a, b) {
    var count, h, item, _i, _j, _len, _len1;
    count = 0;
    h = new Object;
    for (_i = 0, _len = b.length; _i < _len; _i++) {
      item = b[_i];
      h[item] = true;
    }
    for (_j = 0, _len1 = a.length; _j < _len1; _j++) {
      item = a[_j];
      if (!h[item]) count++;
    }
    return count;
  };

  this.jaccardIndex = function(a, b) {
    return intersection_arity(a, b) / union_arity(a, b);
  };

  this.jaccardDistance = function(a, b) {
    return 1 - jaccardIndex(a, b);
  };

  this.hammingDistance = function(a, b) {
    return difference_arity(a, b) + difference_arity(b, a);
  };

  this.normalizedHammingDistance = function(a, b, size) {
    return hammingDistance(a, b) / size;
  };

}).call(this);
